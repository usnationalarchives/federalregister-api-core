app:
  canonical_url: "https://www.federalregister.gov"
admin:
  basecamp_url: <%= ENV['ADMIN_BASECAMP_URL'] %>
  pager_duty_email: <%= ENV['ADMIN_PAGER_DUTY_EMAIL'] %>
  pil_documentation_url: <%= ENV['PIL_DOCUMENTATION_URL'] || "/" %>
  documentation_url: <%= ENV['DOCUMENTATION_URL'] %>
elasticsearch:
  deployment_environment: <%= ENV['DEPLOYMENT_ENVIRONMENT'] %>
  host: <%= ENV['ELASTICSEARCH_HOST'] %>
  trace: false
  enabled: <%= ActiveModel::Type::Boolean.new.cast(ENV['ELASTICSEARCH_ENABLED']) %>
  entry_index_shards: <%= ENV.fetch('ENTRY_INDEX_SHARDS', 1) %>
  public_inspection_document_index_shards: <%= ENV.fetch('PUBLIC_INSPECTION_DOCUMENT_INDEX_SHARDS', 1) %>
feature_flags:
  use_carrierwave_images_in_api: <%= ActiveModel::Type::Boolean.new.cast(ENV['USE_CARRIERWAVE_IMAGES_IN_API']) || false %>
  reindex_all_agency_name_entries: <%= ActiveModel::Type::Boolean.new.cast(ENV['REINDEX_ALL_AGENCY_NAME_ENTRIES']) || false %>
images:
  store_in_filesystem: true
lograge:
  enabled: true
open_calais:
  daily_api_call_limit: <%= ENV["OPEN_CALAIS_DAILY_API_CALL_LIMIT"] || 500 %>
  throttle:
    concurrency: <%= ENV["OPEN_CALAIS_JOBS_CONCURRENCY"] || 1 %>
    at: <%= ENV["OPEN_CALAIS_JOBS_THROTTLE_AT"] || 1 %>
    per: <%= (ENV["OPEN_CALAIS_JOBS_THROTTLE_PER"] || 1).send(:seconds) %>
public_inspection:
  failure_notification_recipients:  <%= ENV['FAILURE_NOTIFICATION_RECIPIENTS']&.split(",") || [] %>
varnish:
  host: <%= ENV["VARNISH_ADDR"] || 'varnish' %>
  port: 6082
regulations_dot_gov:
  base_uri: <%= ENV["REG_GOV_BASE_URL"] || 'http://api.data.gov/TEST/regulations/v3' %>
  throttle:
    at: <%= ENV["REG_GOV_JOBS_THROTTLE_AT"] || 2 %>
    per: <%= ENV["REG_GOV_JOBS_THROTTLE_PER"] || 5 %>
  use_v4_api: <%= ENV.fetch("USE_REG_GOV_V4_API", false) %>
cron:
  delta_auditing: true
  google_analytics: true
  gpo_images:
    import_eps: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('GPO_IMAGES_IMPORT_EPS', true)) %>
    convert_eps: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('GPO_IMAGES_CONVERT_EPS', true)) %>
    reprocess_unlinked_gpo_images: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('REPROCESS_UNLINKED_GPO_IMAGES', false)) %>
  images:
    auto_generate_image_variants: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('AUTO_GENERATE_IMAGE_VARIANTS', true)) %>
    download_historical_images: <%= ActiveModel::Type::Boolean.new.cast(ENV['DOWNLOAD_HISTORICAL_IMAGES']) || false %>
    download_ongoing_images: <%= ActiveModel::Type::Boolean.new.cast(ENV['DOWNLOAD_ONGOING_IMAGES']) || false %>
    environments_requiring_image_download: <%= ENV['ENVIRONMENTS_REQUIRING_IMAGE_DOWNLOAD'].try(:split, ',') || ['Staging', 'Production'] %>
    sftp_hostname: <%= ENV['SFTP_HOSTNAME'] %>
    streamlined_image_pipeline: <%= ActiveModel::Type::Boolean.new.cast(ENV['STREAMLINED_IMAGE_PIPELINE']) || false %>
  import: true
  late_content_notifications: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('LATE_CONTENT_NOTIFICATIONS', true)) %>
  public_inspection: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('CRON_PUBLIC_INSPECTION', true)) %>
  regulations_dot_gov:
    comments: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('REG_GOV_COMMENTS_ENABLED', true)) %>
    dockets: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('REG_GOV_DOCKETS_ENABLED', true)) %>
    documents: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('REG_GOV_DOCUMENTS_ENABLED', true)) %>
  # base_uri: <%= 'http://api.data.gov/regulations/v3' || ENV["REG_GOV_BASE_URL"] || 'http://api.data.gov/TEST/regulations/v3' %>
paperclip:
  abort_on_s3_error: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('ABORT_PAPERCLIP_PROCESSING_ON_S3_ERRORS', false)) %>
prince:
  url: <%= ENV.fetch('PRINCE_XML_URL', nil) %>
  port: <%= ENV.fetch('PRINCE_PORT', 5000) %>
deliver_daily_import_email: <%= ActiveModel::Type::Boolean.new.cast(ENV.fetch('DELIVER_DAILY_IMPORT_EMAIL', true)) %>
public_inspection_document_page_view_start_date: <%= ENV.fetch('PUBLIC_INSPECTION_DOCUMENT_PAGE_VIEW_START_DATE', nil) %>
report_deprecations: <%= ActiveModel::Type::Boolean.new.cast( ENV.fetch("REPORT_DEPRECATIONS", false) ) %>
s3_host_aliases:
  agency_logos: agency-logos.fr2.local
  public_images: images.fr2.local
  lede_photos: lede-photos.fr2.local
  private_images: s3.amazonaws.com
  public_images: images.fr2.local
  public_inspection: public-inspection.fr2.local
